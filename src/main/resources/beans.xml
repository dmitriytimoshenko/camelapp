<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <!-- Фабрика соединений activemq -->
    <bean id="activeMQXAConnectionFactory" class="bitronix.tm.resource.jms.PoolingConnectionFactory" init-method="init"
    destroy-method="close" depends-on="bitronixTransactionManager">
        <property name="className" value="org.apache.activemq.spring.ActiveMQXAConnectionFactory"/>
        <property name="maxPoolSize" value="20"/>
        <property name="minPoolSize" value="10"/>
        <property name="uniqueName" value="xaConnectionFactory"/>
        <property name="driverProperties">
            <props>
                <prop key="brokerURL">tcp://localhost:61616</prop>
            </props>
        </property>
    </bean>

    <!-- Дата сурс -->
    <bean id="postgreDS" class="bitronix.tm.resource.jdbc.PoolingDataSource">
        <property name="uniqueName" value="dspool"/>
        <property name="className" value="org.postgresql.xa.PGXADataSource"/>
        <property name="maxPoolSize" value="5"/>
        <property name="driverProperties">
            <props>
                <prop key="user">postgres</prop>
                <prop key="password">postgres</prop>
                <prop key="serverName">localhost</prop>
                <prop key="portNumber">5432</prop>
                <prop key="dataBaseName">XMLEntity</prop>
            </props>
        </property>
    </bean>

    <!-- Спринговый адаптер для Битроникса -->
    <bean id="jtaTM" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager" ref="bitronixTransactionManager"/>
        <property name="userTransaction" ref="bitronixTransactionManager"/>
    </bean>


    <bean id="jms" class = "org.apache.camel.component.activemq.ActiveMQComponent">
        <property name="transacted" value="false"/>
        <property name="transactionManager" ref="jtaTM"/>
        <property name="connectionFactory" ref="activeMQXAConnectionFactory"/>
    </bean>

    <!-- Начальные настройки Bitronix -->
    <bean id="btmConfig" factory-method="getConfiguration" class="bitronix.tm.TransactionManagerServices">
        <property name="serverId" value="btm"/>
        <property name="logPart1Filename" value="C:/BitronixTM/tx-logs/part1.btm"/>
        <property name="logPart2Filename" value="C:/BitronixTM/tx-logs/part2.btm"/>
    </bean>

    <!-- создание менеджера Bitronix -->
    <bean id="bitronixTransactionManager" factory-method="getTransactionManager" class="bitronix.tm.TransactionManagerServices"
          depends-on="btmConfig" destroy-method="shutdown"/>



    <!--SQL компонент Camel + PosgreSQL DataSourse -->
    <bean id="sql" class="org.apache.camel.component.sql.SqlComponent">
        <property name="dataSource" ref="postgreDS"/>
    </bean>




    <!-- Dead letter queue -->
    <bean id="deadLetterQueue" class="org.apache.camel.builder.DeadLetterChannelBuilder">
        <property name="deadLetterUri" value="jms:queue:dead"/>
        <property name="redeliveryPolicy" ref="redeliveryPolicy"/>
    </bean>

    <!-- Политика переотправки -->
    <bean id="redeliveryPolicy" class="org.apache.camel.processor.errorhandler.RedeliveryPolicy">
        <property name="maximumRedeliveries" value="0"/>
        <property name="redeliveryDelay" value="1000"/>
        <property name="retryAttemptedLogLevel" value="ERROR"/>
    </bean>

    <!-- Процессоры -->
    <bean id="sendProcessor" class="processors.SendProcessor" scope="singleton"/>


    <!-- Роуты -->
    <camel:camelContext id="notes" errorHandlerRef="deadLetterQueue" >
        <camel:route>
            <camel:from uri="file:C:/outputfolder"/>
            <camel:transacted/>
            <camel:choice>
                <camel:when>
                    <camel:simple>${header.CamelFileName} regex '^.*xml$'</camel:simple>
                    <camel:to uri="jms:queue:xmlqueue"/>
                </camel:when>
                <camel:when>
                    <camel:simple>${header.CamelFileName} regex '^.*txt$'</camel:simple>
                    <camel:to uri="jms:queue:txtqueue"/>
                   <!-- <camel:aggregate strategyRef="myAggregationStrategy" completionSize="4">
                        <camel:correlationExpression>
                            <camel:header>MyMSG</camel:header>
                        </camel:correlationExpression>
                        <camel:to uri="jms:queue:txtqueue"/>
                    </camel:aggregate> -->
                </camel:when>
                <camel:otherwise>
                    <camel:throwException exceptionType="java.lang.Exception" message="Something is wrong"/>
                </camel:otherwise>
            </camel:choice>
            <camel:process ref="sendProcessor"/>
        </camel:route>

        <camel:route>
            <camel:from uri="jms:queue:xmlqueue"/>
            <camel:to uri="file:C:/inputfolder"/>
        </camel:route>
        <camel:route>
            <camel:from uri="jms:queue:txtqueue"/>
            <camel:log message="We recived ${body}"/>
            <camel:convertBodyTo type="String"/>
            <camel:to uri="sql:insert into TEXT (id_col, string) values (nextval('text_id_col_seq'), :#${body});"/>
        </camel:route>
    </camel:camelContext>
</beans>